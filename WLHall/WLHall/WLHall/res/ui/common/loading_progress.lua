--------------------------------------------------------------
-- This file was automatically generated by Cocos Studio.
-- Do not make changes to this file.
-- All changes will be lost.
--------------------------------------------------------------

local luaExtend = require "LuaExtend"

-- using for layout to decrease count of local variables
local layout = nil
local localLuaFile = nil
local innerCSD = nil
local innerProject = nil
local localFrame = nil

local Result = {}
------------------------------------------------------------
-- function call description
-- create function caller should provide a function to
-- get a callback function in creating scene process.
-- the returned callback function will be registered to
-- the callback event of the control.
-- the function provider is as below :
-- Callback callBackProvider(luaFileName, node, callbackName)
-- parameter description:
-- luaFileName  : a string, lua file name
-- node         : a Node, event source
-- callbackName : a string, callback function name
-- the return value is a callback function
------------------------------------------------------------
function Result.create(callBackProvider)

local result={}
setmetatable(result, luaExtend)

--Create Node
local Node=cc.Node:create()
Node:setName("Node")

--Create img_loadingbg
local img_loadingbg = ccui.ImageView:create()
img_loadingbg:ignoreContentAdaptWithSize(false)
cc.SpriteFrameCache:getInstance():addSpriteFrames("hall/loading.plist")
img_loadingbg:loadTexture("hall/loading/loadibg_bg.png",1)
img_loadingbg:setScale9Enabled(true)
img_loadingbg:setCapInsets({x = 8, y = 2, width = 10, height = 4})
img_loadingbg:setLayoutComponentEnabled(true)
img_loadingbg:setName("img_loadingbg")
img_loadingbg:setTag(115)
img_loadingbg:setCascadeColorEnabled(true)
img_loadingbg:setCascadeOpacityEnabled(true)
img_loadingbg:setAnchorPoint(0.5000, 0.0000)
img_loadingbg:setPosition(0.0000, 55.7117)
layout = ccui.LayoutComponent:bindLayoutComponent(img_loadingbg)
layout:setSize({width = 1280.0000, height = 13.0000})
layout:setLeftMargin(-640.0000)
layout:setRightMargin(-640.0000)
layout:setTopMargin(-68.7117)
layout:setBottomMargin(55.7117)
Node:addChild(img_loadingbg)

--Create bar_loading
local bar_loading = ccui.LoadingBar:create()
bar_loading:loadTexture("hall/loading/loadibg_bar.png",0)
bar_loading:ignoreContentAdaptWithSize(false)
bar_loading:setPercent(61)
bar_loading:setLayoutComponentEnabled(true)
bar_loading:setName("bar_loading")
bar_loading:setTag(114)
bar_loading:setCascadeColorEnabled(true)
bar_loading:setCascadeOpacityEnabled(true)
bar_loading:setAnchorPoint(0.0000, 0.5000)
bar_loading:setPosition(0.0000, 6.0001)
layout = ccui.LayoutComponent:bindLayoutComponent(bar_loading)
layout:setPositionPercentY(0.4615)
layout:setPercentWidth(1.0000)
layout:setPercentHeight(0.6154)
layout:setSize({width = 1280.0000, height = 8.0000})
layout:setTopMargin(2.9999)
layout:setBottomMargin(2.0001)
img_loadingbg:addChild(bar_loading)

--Create node_tips
local node_tips=cc.Node:create()
node_tips:setName("node_tips")
node_tips:setTag(123)
node_tips:setCascadeColorEnabled(true)
node_tips:setCascadeOpacityEnabled(true)
node_tips:setPosition(0.0000, 27.4423)
layout = ccui.LayoutComponent:bindLayoutComponent(node_tips)
layout:setTopMargin(-27.4423)
layout:setBottomMargin(27.4423)
Node:addChild(node_tips)

--Create text_percent
local text_percent = ccui.Text:create()
text_percent:ignoreContentAdaptWithSize(true)
text_percent:setTextAreaSize({width = 0, height = 0})
text_percent:setFontSize(24)
text_percent:setString([[65%]])
text_percent:setLayoutComponentEnabled(true)
text_percent:setName("text_percent")
text_percent:setTag(113)
text_percent:setCascadeColorEnabled(true)
text_percent:setCascadeOpacityEnabled(true)
text_percent:setPosition(0.0000, 61.3446)
layout = ccui.LayoutComponent:bindLayoutComponent(text_percent)
layout:setSize({width = 48.0000, height = 28.0000})
layout:setLeftMargin(-24.0000)
layout:setRightMargin(-24.0000)
layout:setTopMargin(-75.3446)
layout:setBottomMargin(47.3446)
node_tips:addChild(text_percent)

--Create text_tips
local text_tips = ccui.Text:create()
text_tips:ignoreContentAdaptWithSize(true)
text_tips:setTextAreaSize({width = 0, height = 0})
text_tips:setFontSize(24)
text_tips:setString([[资源加载中......]])
text_tips:setLayoutComponentEnabled(true)
text_tips:setName("text_tips")
text_tips:setTag(111)
text_tips:setCascadeColorEnabled(true)
text_tips:setCascadeOpacityEnabled(true)
text_tips:setAnchorPoint(0.0000, 0.5000)
text_tips:setPosition(-79.0000, -0.0001)
layout = ccui.LayoutComponent:bindLayoutComponent(text_tips)
layout:setSize({width = 159.0000, height = 28.0000})
layout:setLeftMargin(-79.0000)
layout:setRightMargin(-80.0000)
layout:setTopMargin(-13.9999)
layout:setBottomMargin(-14.0001)
node_tips:addChild(text_tips)

--Create text_counter
local text_counter = ccui.Text:create()
text_counter:ignoreContentAdaptWithSize(true)
text_counter:setTextAreaSize({width = 0, height = 0})
text_counter:setFontSize(24)
text_counter:setString([[100/100]])
text_counter:setLayoutComponentEnabled(true)
text_counter:setName("text_counter")
text_counter:setTag(112)
text_counter:setCascadeColorEnabled(true)
text_counter:setCascadeOpacityEnabled(true)
text_counter:setAnchorPoint(1.0000, 0.5000)
text_counter:setPosition(170.9969, -0.0001)
layout = ccui.LayoutComponent:bindLayoutComponent(text_counter)
layout:setSize({width = 87.0000, height = 28.0000})
layout:setLeftMargin(83.9969)
layout:setRightMargin(-170.9969)
layout:setTopMargin(-13.9999)
layout:setBottomMargin(-14.0001)
node_tips:addChild(text_counter)

--Create Animation
result['animation'] = ccs.ActionTimeline:create()

result['animation']:setDuration(0)
result['animation']:setTimeSpeed(1.0000)
--Create Animation List

result['root'] = Node
return result;
end

return Result

