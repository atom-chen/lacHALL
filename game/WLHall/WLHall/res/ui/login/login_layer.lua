--------------------------------------------------------------
-- This file was automatically generated by Cocos Studio.
-- Do not make changes to this file.
-- All changes will be lost.
--------------------------------------------------------------

local luaExtend = require "LuaExtend"

-- using for layout to decrease count of local variables
local layout = nil
local localLuaFile = nil
local innerCSD = nil
local innerProject = nil
local localFrame = nil

local Result = {}
------------------------------------------------------------
-- function call description
-- create function caller should provide a function to 
-- get a callback function in creating scene process.
-- the returned callback function will be registered to 
-- the callback event of the control.
-- the function provider is as below :
-- Callback callBackProvider(luaFileName, node, callbackName)
-- parameter description:
-- luaFileName  : a string, lua file name
-- node         : a Node, event source
-- callbackName : a string, callback function name
-- the return value is a callback function
------------------------------------------------------------
function Result.create(callBackProvider)

local result={}
setmetatable(result, luaExtend)

--Create Layer
local Layer=cc.Node:create()
Layer:setName("Layer")
layout = ccui.LayoutComponent:bindLayoutComponent(Layer)
layout:setSize({width = 1280.0000, height = 720.0000})

--Create panel_bg
local panel_bg = ccui.Layout:create()
panel_bg:ignoreContentAdaptWithSize(false)
panel_bg:setClippingEnabled(false)
panel_bg:setBackGroundColorType(1)
panel_bg:setBackGroundColor({r = 0, g = 0, b = 0})
panel_bg:setBackGroundColorOpacity(127)
panel_bg:setTouchEnabled(true);
panel_bg:setLayoutComponentEnabled(true)
panel_bg:setName("panel_bg")
panel_bg:setTag(8)
panel_bg:setCascadeColorEnabled(true)
panel_bg:setCascadeOpacityEnabled(true)
layout = ccui.LayoutComponent:bindLayoutComponent(panel_bg)
layout:setPercentWidth(1.0000)
layout:setPercentHeight(0.1847)
layout:setSize({width = 1280.0000, height = 133.0000})
layout:setTopMargin(587.0000)
Layer:addChild(panel_bg)

--Create node_logo
innerCSD = require("ui.loading.loading_node")
innerProject = innerCSD.create(callBackProvider)
local node_logo = innerProject.root
node_logo.animation = innerProject.animation
node_logo:setName("node_logo")
node_logo:setTag(74)
node_logo:setCascadeColorEnabled(true)
node_logo:setCascadeOpacityEnabled(true)
layout = ccui.LayoutComponent:bindLayoutComponent(node_logo)
layout:setRightMargin(1280.0000)
layout:setTopMargin(720.0000)
innerProject.animation:setTimeSpeed(1.0000)
node_logo:runAction(innerProject.animation)
Layer:addChild(node_logo)

--Create Sprite_1
local Sprite_1 = cc.Sprite:create("Default/Sprite.png")
Sprite_1:setName("Sprite_1")
Sprite_1:setTag(191)
Sprite_1:setCascadeColorEnabled(true)
Sprite_1:setCascadeOpacityEnabled(true)
Sprite_1:setVisible(false)
Sprite_1:setPosition(640.0000, 360.0000)
Sprite_1:setOpacity(153)
layout = ccui.LayoutComponent:bindLayoutComponent(Sprite_1)
layout:setPositionPercentYEnabled(true)
layout:setPositionPercentX(0.5000)
layout:setPositionPercentY(0.5000)
layout:setPercentWidth(0.0359)
layout:setPercentHeight(0.0639)
layout:setSize({width = 46.0000, height = 46.0000})
layout:setLeftMargin(617.0000)
layout:setRightMargin(617.0000)
layout:setTopMargin(337.0000)
layout:setBottomMargin(337.0000)
Sprite_1:setBlendFunc({src = 770, dst = 771})
Layer:addChild(Sprite_1)

--Create Animation
result['animation'] = ccs.ActionTimeline:create()
  
result['animation']:setDuration(0)
result['animation']:setTimeSpeed(1.0000)
--Create Animation List

result['root'] = Layer
return result;
end

return Result

